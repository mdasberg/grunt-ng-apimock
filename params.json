{
  "name": "Grunt-ng-apimock",
  "tagline": "Grunt plugin that provides the ability to use scenario based api mocking of angular apps",
  "body": "# grunt-ng-apimock [![Build Status](https://travis-ci.org/mdasberg/grunt-ng-apimock.svg?branch=master)](https://travis-ci.org/mdasberg/grunt-ng-apimock) [![npm version](https://img.shields.io/node/v/grunt-ng-apimock.svg)](https://github.com/mdasberg/grunt-ng-apimock) [![dependency Status](https://img.shields.io/david/mdasberg/grunt-ng-apimock.svg)](https://david-dm.org/mdasberg/grunt-ng-apimock) [![devDependency Status](https://img.shields.io/david/dev/mdasberg/grunt-ng-apimock.svg)](https://david-dm.org/mdasberg/ggrunt-ng-apimock#info=devDependencies) [![npm downloads](https://img.shields.io/npm/dm/grunt-ng-apimock.svg?style=flat-square)](https://www.npmjs.com/package/grunt-ng-apimock)\r\n\r\n> Grunt plugin that provides the ability to use scenario based api mocking:\r\n - for local development \r\n - for protractor testing\r\n \r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.5`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-ng-apimock --save-dev\r\n\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-ng-apimock');\r\n\r\n```\r\n\r\n## The \"ngApimock\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `ngApimock` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  ngApimock: {\r\n    options: {\r\n      // Task-specific options go here.\r\n    },\r\n    your_target: {\r\n      // Target-specific file lists and/or options go here.\r\n    },\r\n  },\r\n})\r\n\r\n```\r\n\r\nThis task will process the mock data provided in the configuration and make it accessible for connect as middleware.\r\n\r\n### Options\r\n\r\n#### options.defaultOutputDir\r\nType: `String`\r\nDefault: '.tmp/mocks/'\r\n\r\nShould be the location where the ngApimock plugin will put it's generated files.\r\n\r\n#### src\r\nType: `String`\r\nMandatory: true\r\n\r\nShould be the location where the mock json files are located.\r\n\r\n### Usage Examples\r\n\r\n#### Default Options\r\n\r\n```js\r\ngrunt.initConfig({\r\n  ngApimocks: {\r\n    options: {\r\n        defaultOutputDir: '...' // the output directory\r\n    },\r\n    your_target: {   \r\n       src: '...' // the directory containing all your json mocks\r\n    }\r\n  }\r\n})\r\n\r\n```\r\n\r\n### Howto write mocks\r\nThere are a couple of rules to follow.\r\n\r\n1. For each api call create a separate file\r\n2. Each file needs to follow the format below.\r\n\r\n```js\r\n{\r\n  \"expression\": \"your expression here (ie a regex without the leading and trailing '/' or a string)\",\r\n  \"method\": \"the http method (ie GET, POST, PUT or DELETE)\",\r\n  \"name\": \"identifiable name for this service call\"  // if non is provided, expression$$method will be used\r\n  \"isArray\": \"indicates if the response data is an array or object\",\r\n  \"responses\": {\r\n    \"some-meaningful-scenario-name\": {\r\n      \"default\": true, // if false or not provided this response will not be used as default\r\n      \"status\": 200, // optional - defaults to 200\r\n      \"data\": {}, // optional\r\n      \"headers\": {}, // optional - defaults to {}\r\n      \"statusText\": \"\" // optional \r\n    },\r\n    \"some-other-meaningful-scenario-name\": {\r\n      \"data\": {}\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n## Howto use global variables\r\nIf for instance, you have date sensitive information in you mocks, mock data is not flexible enough.\r\nYou can use global variables for this. By surrounding a value in the response.data with %%theVariableName%%,\r\nyou can make your data more flexible, like this:\r\n\r\n```json\r\n\"responses\": {\r\n    \"some-meaningful-scenario-name\": {\r\n        \"data\": {\r\n            \"today\": '%%today%%\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nFor local development you can use the web interface to add, change or delete variables.\r\nFor protractor you can use the following commands\r\n```js\r\n     ngApimock.setGlobalVariable(name, value); // to add or update\r\n     ngApimock.deleteGlobalVariable(name); // to delete \r\n```\r\n\r\n### Howto serve selected mocks\r\nTo be able to use the selected mocks you need to do two things:\r\n\r\n1. Add the connect middleware\r\n2. Add the mocking interface to your connect configuration\r\n\r\n#### Add the connect middleware\r\nWhen running grunt-contrib-connect you can do add the following middleware block to your configuration\r\n\r\n\r\n```js\r\n{\r\n    connect: {\r\n        yourTarget: {\r\n            options: {\r\n                middleware: function (connect) {\r\n                    return [\r\n                        (require('grunt-ng-apimock/lib/utils').ngApimockRequest),\r\n                        ...\r\n                        connect().use('/', serveStatic('some-path-where-your-sources-are'))\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### Add the mocking interface to your connect configuration\r\nWhen running grunt-contrib-connect you can do add the following staticServe block to your configuration\r\n\r\n```js\r\n{\r\n    connect: {\r\n        yourTarget: {\r\n            options: {\r\n                middleware: function (connect) {\r\n                    return [\r\n                        ...\r\n                        connect().use('/mocking', serveStatic('path/to/the/generated/mocking/index.html')),\r\n                        connect().use('/', serveStatic('some-path-where-your-sources-are'))\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Howto use for local development\r\n\r\nAs you have configured both the [connect middleware](#add-the-connect-middleware) and the [mocking interface](#add-the-mocking-interface-to-your-connect-configuration), everything \r\n  should work out of the box. By default all the responses configured as default, will be returned if the expression matches.\r\n  \r\n  If you would like to change the selected scenario, you can go to http://localhost:9000/mocking and use the interface to change the selected scenario or variables\r\n\r\nThe interface looks like this:\r\n\r\n![web interface](https://github.com/mdasberg/grunt-ng-apimock/blob/master/img/web-interface-grunt-ng-apimock.png)\r\n\r\n\r\n\r\n### Howto use for your protractor tests.\r\nAs you are building an [AngularJS](https://angularjs.org/) application you will probably use [Protractor](https://angular.github.io/protractor/#/) for testing your UI.\r\n\r\nProtractor provides the ability to inject a mock module in your application by adding the following to your protractor test.\r\n\r\n```js\r\ndescribe('Some test', function () {\r\n    browser.addMockModule('modName', function() {\r\n        angular.module('modName', []).value('foo', 'bar');\r\n    });\r\n});\r\n```\r\n\r\nTo serve the mock data from the json files that we created for running our application locally with mock data, you can replace the block above with this\r\n\r\n```js\r\ndescribe('Some test', function () {\r\n    var ngApimock = require('.tmp/mocking/protractor.mock'); // or the path/to/protractor.mock.js\r\n    ngApimock.selectScenario(require('path/to/mocks/some.json'), 'nok'); // nok is the name of the scenario    \r\n    ngApimock.selectScenario('name attribute in mock.json', 'ok'); // ok is the name of the scenario\r\n    ngApimock.setGlobalVariable('someKey', 'someValue'); // add or update a global variable which will be used to replace in the response data.\r\n\r\n    it('should do something', function() {\r\n        ngApimock.selectScenario('name of some api', 'another'); // at runtime you can change a scenario\r\n    });\r\n });\r\n   \r\n```\r\n\r\nBy default all the scenario's marked as default will be returned if the expression matches. So you only need to add ngApimock.selectScenario in case your test need\r\nother scenario data to be returned.\r\n\r\nNgApimock also works when running multiple tests concurrent, by using the protract session id of the test. \r\nThis ensures that changing a scenario in one test, will not effect another test. \r\n\r\n### Available functions\r\nAll these functions are protractor promises, so they can be chained.\r\n\r\n#### selectScenario(json, scenarionName)\r\nSelects the given scenario\r\n  \r\n#### resetScenarios()\r\nResets the scenarios (only passthroughs are set)\r\n\r\n#### setGlobalVariable(key, value)\r\nAdds or updates the global key/value pair \r\n\r\n#### deleteGlobalVariable(key)\r\nRemove the global variable matching the key\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}